Index: app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\n\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.*\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.core.content.ContentProviderCompat.requireContext\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.example.a23_hf069.*\r\nimport okhttp3.*\r\nimport org.xmlpull.v1.XmlPullParser\r\nimport org.xmlpull.v1.XmlPullParserFactory\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport java.time.LocalDate\r\nimport java.time.format.DateTimeFormatter\r\nimport java.util.*\r\n\r\nclass WantedFilteringFragment : Fragment() {\r\n    private val baseUrl =\r\n        \"http://openapi.work.go.kr/opi/opi/opia/wantedApi.do?authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&callTp=L&returnType=XML&display=100\"\r\n    private var page = 1\r\n\r\n    //완료 버튼\r\n    lateinit var complete_btn: Button\r\n\r\n    //지역,직종\r\n    lateinit var regioncl_btn: Button\r\n    lateinit var jobcl_btn: Button\r\n    lateinit var tv_jobcl_selected: TextView\r\n    lateinit var tv_regioncl_selected: TextView\r\n    lateinit var selectedJob: String\r\n    lateinit var selectedRegion: String\r\n\r\n    //라디오 그룹\r\n    lateinit var rgEdu: RadioGroup // 학력 라디오그룹\r\n    lateinit var rgCareer: RadioGroup // 경력 라디오그룹\r\n    lateinit var rgCloseDt: RadioGroup // 마감일 라디오그룹\r\n\r\n    private lateinit var wantedList: List<Wanted>\r\n    private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels() // 필터링된 리스트를 전달하는 viewModel 객체 생성\r\n\r\n\r\n    // 필터링 키워드\r\n    private var keywordRegion = \"\"\r\n    private var keywordJob = \"\"\r\n    private var keywordEdu = \"\"\r\n    private var keywordCareer = \"\"\r\n    private var keywordCloseDt = \"\"\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        val rootView = inflater.inflate(R.layout.fragment_wanted_filtering, container, false)\r\n        return rootView\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n\r\n        //완료 버튼 초기화\r\n        complete_btn = view.findViewById<Button>(R.id.complete_btn1)\r\n        //지역 선택 초기화\r\n        regioncl_btn = view.findViewById<Button>(R.id.regioncl_btn)\r\n        //직종 선택 초기화\r\n        jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)\r\n\r\n\r\n        tv_regioncl_selected =\r\n            view.findViewById(R.id.tv_regioncl_selected) // 선택된 지역 정보를 나타낼 TextView 초기화\r\n        tv_jobcl_selected = view.findViewById(R.id.tv_jobcl_selected) // 선택된 직종 정보를 나타낼 TextView 초기화\r\n        selectedRegion =\r\n            sharedSelectionViewModel.selectedRegion.toString() // ViewModel에서 선택된 지역 정보를 가져와서 TextView에 설정\r\n        tv_regioncl_selected.text = selectedRegion //화면에 textView 나타내기\r\n        selectedJob =\r\n            sharedSelectionViewModel.selectedJob.toString() // ViewModel에서 선택된 직종 정보를 가져와서 TextView에 설정\r\n        tv_jobcl_selected.text = selectedJob //화면에 textView 나타내기\r\n\r\n        // 라디오 그룹을 초기화\r\n        rgEdu = view.findViewById(R.id.rg_edu)\r\n        rgCareer = view.findViewById(R.id.rg_career)\r\n        rgCloseDt = view.findViewById(R.id.rg_closeDt)\r\n\r\n        // 완료 버튼이 눌렸을 때 지역,직종 변수 및 학력,경력,마감일 라디오버튼 확인 -> 선택된 조건에 해당하는 공고목록 가져와서 UI에 업데이트\r\n        complete_btn.setOnClickListener {\r\n            // 해당 라디오 그룹에서 선택된 Id를 가져오기\r\n            val checkEduId = rgEdu.checkedRadioButtonId\r\n            val checkCareerId = rgCareer.checkedRadioButtonId\r\n            val checkCloseDtId = rgCloseDt.checkedRadioButtonId\r\n\r\n            // 선택한 지역이 있을 경우 키워드에 해당 지역이름 넣기\r\n            if (selectedRegion != \"\") {\r\n                keywordRegion = selectedRegion\r\n            }\r\n\r\n            // 선택한 직종이 있을 경우 필터링하기\r\n            if (selectedJob != \"\") {\r\n                keywordJob = selectedJob\r\n            }\r\n\r\n            // 학력 라디오 그룹중 선택된 라디오 버튼이 있을때 처리\r\n            when (checkEduId) {\r\n                R.id.rb_e_1 -> {\r\n                    keywordEdu = \"학력무관\"\r\n                }\r\n                R.id.rb_e_2 -> {\r\n                    keywordEdu = \"고졸\"\r\n                }\r\n                R.id.rb_e_3 -> {\r\n                    keywordEdu = \"대졸(2~3년)\"\r\n                }\r\n                R.id.rb_e_4 -> {\r\n                    keywordEdu = \"대졸(4년)\"\r\n                }\r\n            }\r\n\r\n            // 경력 라디오 그룹중 선택된 라디오 버튼이 있을때 처리\r\n            when (checkCareerId) {\r\n                R.id.rb_c_1 -> {\r\n                    keywordCareer = \"관계없음\"\r\n                }\r\n                R.id.rb_c_2 -> {\r\n                    // 고등학교 졸 라디오 버튼이 선택되었을 때\r\n                    keywordCareer = \"신입\"\r\n                }\r\n                R.id.rb_c_3 -> {\r\n                    // 대학(2년제) 라디오 버튼이 선택되었을 때\r\n                    keywordCareer = \"경력\"\r\n                }\r\n            }\r\n            // 마감일 라디오 그룹중 선택된 라디오 버튼이 있을때 처리\r\n            when (checkCloseDtId) {\r\n                R.id.rb_d_1 -> {\r\n                    keywordCloseDt = \"7days\"\r\n                }\r\n                R.id.rb_d_2 -> {\r\n                    keywordCloseDt = \"30days\"\r\n                }\r\n                R.id.rb_d_3 -> {\r\n                    keywordCloseDt = \"60days\"\r\n                }\r\n            }\r\n\r\n\r\n            // 지역 조건은 필수 선택 조건으로 무조건 선택해야 함\r\n            if (keywordRegion == \"\") {\r\n                showWarningToast1() // 지역 조건을 선택하지 않은 경우 토스트창 띄우기\r\n            }\r\n            // 지역조건을 선택한 경우\r\n            else {\r\n                // 필터링 후 UI에 반영\r\n                fetchWantedList()\r\n\r\n                // 화면전환\r\n                val wantedResultFragment = WantedResultFragment()\r\n                requireActivity().supportFragmentManager.beginTransaction()\r\n                    .replace(R.id.fl_container, wantedResultFragment)\r\n                    .addToBackStack(null)\r\n                    .commit()\r\n            }\r\n\r\n        }\r\n        // complete_btn 리스너 종료\r\n\r\n        // 지역선택 버튼 눌렸을 때 지역선택 화면으로 전환\r\n        regioncl_btn.setOnClickListener {\r\n            val regionSelectionFragment = RegionSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, regionSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        // 직종선택 버튼 눌렸을 때 직종선택 화면으로 전환\r\n        jobcl_btn.setOnClickListener {\r\n            val jobSelectionFragment = JobWorkNetSelectionFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, jobSelectionFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n    }\r\n\r\n    // 키워드에 해당하는 채용공고 가져와서 sharedSelectionViewModel의 리스트에 저장 -> UI에 반영\r\n    private fun fetchWantedList() {\r\n        val client = OkHttpClient()\r\n        val request = Request.Builder()\r\n            .url(\"$baseUrl&startPage=$page&keyword=$keywordRegion\") // &keyword로 지역 필터링하기\r\n            .build()\r\n        var result: List<Wanted> = emptyList()\r\n\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                println(e.printStackTrace())\r\n            }\r\n\r\n            @RequiresApi(Build.VERSION_CODES.O)\r\n            override fun onResponse(call: Call, response: Response) {\r\n                if (response.isSuccessful) {\r\n                    val xmlString = response.body?.string() // url에 있는 모든 글자 다가져오기\r\n                    result = parseXmlResponse(xmlString) // parsing한 후 리스트화 하기\r\n                    wantedList = result\r\n\r\n                    if(keywordEdu ==\"\" && keywordCareer == \"\"){ // 지역만 선택\r\n                        sharedSelectionViewModel.updateFilteredList(wantedList)\r\n                    }\r\n                    else if (keywordCareer.isNotEmpty() && keywordEdu == \"\") { // 경력만 선택\r\n                        val filteredList1 = wantedList.filter {// 경력 필터링\r\n                            it.career == keywordCareer\r\n                        }\r\n                        sharedSelectionViewModel.updateFilteredList(filteredList1)\r\n                    } else if (keywordEdu.isNotEmpty() && keywordCareer == \"\") { // 학력만 선택\r\n                        val filteredList1 = wantedList.filter { // 학력 필터링\r\n                            it.minEdubg == keywordEdu\r\n                        }\r\n                        sharedSelectionViewModel.updateFilteredList(filteredList1)\r\n                    } else { // 경력, 학력 모두 선택\r\n                        val filteredList1 = wantedList.filter { // 경력, 학력 필터링\r\n                            it.minEdubg == keywordEdu && it.career == keywordCareer\r\n                        }\r\n                        sharedSelectionViewModel.updateFilteredList(filteredList1)\r\n                    }\r\n\r\n\r\n                    // 더 많은 페이지가 있는지 확인합니다.\r\n                    val factory = XmlPullParserFactory.newInstance()\r\n                    val xpp = factory.newPullParser()\r\n                    xpp.setInput(StringReader(xmlString))\r\n\r\n                    var eventType = xpp.eventType\r\n                    var totalItems = 0\r\n                    var totalPages = 0\r\n\r\n                    while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                        if (eventType == XmlPullParser.START_TAG && xpp.name == \"total\") {\r\n                            totalItems = xpp.nextText().toInt()\r\n                            totalPages = totalItems / 100\r\n                            println(\"totalpages: $totalPages\")\r\n                            break\r\n                        }\r\n                        eventType = xpp.next()\r\n                    }\r\n                    // 더 많은 페이지가 있다면 다음 페이지를 가져옵니다.\r\n                    while (totalPages > page) {\r\n                        page += 1\r\n                        fetchWantedList()\r\n                    }\r\n\r\n                }// if 응답이 성공적일때\r\n                else {\r\n                    showErrorToast()\r\n                } //if 응답 실패일때\r\n            } //onResponse 함수 종료\r\n        }) //callback 종료\r\n    } // fetchWantedList 함수 종료\r\n\r\n    data class Wanted(\r\n        val company: String,\r\n        val title: String,\r\n        val salTpNm: String?,\r\n        val sal: String?,\r\n        val region: String?,\r\n        val holidayTpNm: String?,\r\n        val minEdubg: String?,\r\n        val career: String?,\r\n        val closeDt: String?,\r\n        val wantedMobileInfoUrl: String?,\r\n        val jobsCd: String?,\r\n        val infoSvc: String?\r\n    )\r\n\r\n    private fun parseXmlResponse(xmlResponse: String?): List<Wanted> {\r\n        val wantedList = mutableListOf<Wanted>()\r\n        val factory = XmlPullParserFactory.newInstance()\r\n        val xpp = factory.newPullParser()\r\n        xpp.setInput(StringReader(xmlResponse))\r\n\r\n        var eventType = xpp.eventType\r\n        var company: String? = null // 회사명\r\n        var title: String? = null // 채용제목\r\n        var salTpNm: String? = null // 임금형태\r\n        var sal: String? = null // 급여\r\n        var region: String? = null // 근무지역\r\n        var holidayTpNm: String? = null // 근무형태\r\n        var minEdubg: String? = null // 최소학력\r\n        var career: String? = null // 경력\r\n        var closeDt: String? = null // 마감일자\r\n        var wantedMobileInfoUrl: String? = null // 워크넷 모바일 채용정보 URL\r\n        var jobsCd: String? = null // 직종코드\r\n        var infoSvc: String? = null // 정보제공처\r\n\r\n        while (eventType != XmlPullParser.END_DOCUMENT) {\r\n            when (eventType) {\r\n                XmlPullParser.START_TAG -> {\r\n                    when (xpp.name) {\r\n                        \"company\" -> company = xpp.nextText()\r\n                        \"title\" -> title = xpp.nextText()\r\n                        \"salTpNm\" -> salTpNm = xpp.nextText()\r\n                        \"sal\" -> sal = xpp.nextText()\r\n                        \"region\" -> region = xpp.nextText()\r\n                        \"holidayTpNm\" -> holidayTpNm = xpp.nextText()\r\n                        \"minEdubg\" -> minEdubg = xpp.nextText()\r\n                        \"career\" -> career = xpp.nextText()\r\n                        \"closeDt\" -> closeDt = xpp.nextText()\r\n                        \"wantedMobileInfoUrl\" -> wantedMobileInfoUrl = xpp.nextText()\r\n                        \"jobsCd\" -> jobsCd = xpp.nextText()\r\n                        \"infoSvc\" -> infoSvc = xpp.nextText()\r\n                    }\r\n                }\r\n                XmlPullParser.END_TAG -> {\r\n                    if (xpp.name == \"wanted\") {\r\n                        company?.let { c ->\r\n                            title?.let { t ->\r\n                                wantedList.add(\r\n                                    Wanted(\r\n                                        c,\r\n                                        t,\r\n                                        salTpNm,\r\n                                        sal,\r\n                                        region,\r\n                                        holidayTpNm,\r\n                                        minEdubg,\r\n                                        career,\r\n                                        closeDt,\r\n                                        wantedMobileInfoUrl,\r\n                                        jobsCd,\r\n                                        infoSvc\r\n                                    )\r\n                                )\r\n                            }\r\n                        }\r\n                        company = null\r\n                        title = null\r\n                        salTpNm = null\r\n                        sal = null\r\n                        region = null\r\n                        holidayTpNm = null\r\n                        minEdubg = null\r\n                        career = null\r\n                        closeDt = null\r\n                        wantedMobileInfoUrl = null\r\n                        jobsCd = null\r\n                        infoSvc = null\r\n                    }\r\n                }\r\n            }\r\n            eventType = xpp.next()\r\n        } // while문 종료\r\n        return wantedList\r\n    }\r\n\r\n\r\n    private fun showErrorToast() {\r\n        Toast.makeText(requireContext(), \"Failed to fetch wanted list.\", Toast.LENGTH_SHORT).show()\r\n    }\r\n\r\n    private fun showWarningToast1() {\r\n        Toast.makeText(requireContext(), \"지역은 필수 선택 조건입니다.\", Toast.LENGTH_SHORT).show()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(revision ea91a29097805548d7e4dbef59777782b754989d)
+++ b/app/src/main/java/com/example/a23_hf069/WantedFilteringFragment.kt	(date 1691562114000)
@@ -29,9 +29,10 @@
     //완료 버튼
     lateinit var complete_btn: Button
 
-    //지역,직종
+    //지역,직종 선택 버튼
     lateinit var regioncl_btn: Button
     lateinit var jobcl_btn: Button
+
     lateinit var tv_jobcl_selected: TextView
     lateinit var tv_regioncl_selected: TextView
     lateinit var selectedJob: String
@@ -70,7 +71,6 @@
         complete_btn = view.findViewById<Button>(R.id.complete_btn1)
         //지역 선택 초기화
         regioncl_btn = view.findViewById<Button>(R.id.regioncl_btn)
-        //직종 선택 초기화
         jobcl_btn = view.findViewById<Button>(R.id.jobcl_btn)
 
 
@@ -98,7 +98,8 @@
 
             // 선택한 지역이 있을 경우 키워드에 해당 지역이름 넣기
             if (selectedRegion != "") {
-                keywordRegion = selectedRegion
+                keywordRegion = sharedSelectionViewModel.keywordRegions
+                println(keywordRegion)
             }
 
             // 선택한 직종이 있을 경우 필터링하기
@@ -194,7 +195,7 @@
     private fun fetchWantedList() {
         val client = OkHttpClient()
         val request = Request.Builder()
-            .url("$baseUrl&startPage=$page&keyword=$keywordRegion") // &keyword로 지역 필터링하기
+            .url("$baseUrl&startPage=$page&keyword=$keywordRegion") // &keyword로 지역 1차 필터링하기 (이렇게 안하면 traffic 터져서 아무것도 안나옴)
             .build()
         var result: List<Wanted> = emptyList()
 
@@ -210,21 +211,26 @@
                     result = parseXmlResponse(xmlString) // parsing한 후 리스트화 하기
                     wantedList = result
 
+                    // 지역 2차 필터링하기
+                    val regionsToFilter = keywordRegion.replace(" ", "").split("|")
+                    val filteredList = wantedList.filter { it.region?.replace(" ","") in regionsToFilter }
+
+
                     if(keywordEdu =="" && keywordCareer == ""){ // 지역만 선택
-                        sharedSelectionViewModel.updateFilteredList(wantedList)
+                        sharedSelectionViewModel.updateFilteredList(filteredList)
                     }
                     else if (keywordCareer.isNotEmpty() && keywordEdu == "") { // 경력만 선택
-                        val filteredList1 = wantedList.filter {// 경력 필터링
+                        val filteredList1 = filteredList.filter {// 경력 필터링
                             it.career == keywordCareer
                         }
                         sharedSelectionViewModel.updateFilteredList(filteredList1)
                     } else if (keywordEdu.isNotEmpty() && keywordCareer == "") { // 학력만 선택
-                        val filteredList1 = wantedList.filter { // 학력 필터링
+                        val filteredList1 = filteredList.filter { // 학력 필터링
                             it.minEdubg == keywordEdu
                         }
                         sharedSelectionViewModel.updateFilteredList(filteredList1)
                     } else { // 경력, 학력 모두 선택
-                        val filteredList1 = wantedList.filter { // 경력, 학력 필터링
+                        val filteredList1 = filteredList.filter { // 경력, 학력 필터링
                             it.minEdubg == keywordEdu && it.career == keywordCareer
                         }
                         sharedSelectionViewModel.updateFilteredList(filteredList1)
Index: app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\n\r\nclass SharedSelectionViewModel : ViewModel() {\r\n    var selectedJob: String? = \"\"\r\n    var selectedRegion: String? = \"\"\r\n    var selectedJobCode: String?=null\r\n\r\n    private val __filteredList = MutableLiveData<List<WantedFilteringFragment.Wanted>>()\r\n\r\n    val _filteredList: LiveData<List<WantedFilteringFragment.Wanted>> get() = __filteredList\r\n\r\n\r\n    // 필터링된 리스트들을 업데이트하는 함수\r\n    fun updateFilteredList(filteredList: List<WantedFilteringFragment.Wanted>) {\r\n         __filteredList.postValue(filteredList)\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt b/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt
--- a/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt	(revision ea91a29097805548d7e4dbef59777782b754989d)
+++ b/app/src/main/java/com/example/a23_hf069/SharedSelectionViewModel.kt	(date 1691543978000)
@@ -8,6 +8,7 @@
     var selectedJob: String? = ""
     var selectedRegion: String? = ""
     var selectedJobCode: String?=null
+    var keywordRegions: String =""
 
     private val __filteredList = MutableLiveData<List<WantedFilteringFragment.Wanted>>()
 
Index: app/src/main/java/com/example/a23_hf069/RegionSelectionFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.a23_hf069\r\n\r\nimport android.os.Bundle\r\nimport android.util.Xml\r\nimport android.view.LayoutInflater\r\nimport android.view.MotionEvent\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.AdapterView\r\nimport android.widget.ArrayAdapter\r\nimport android.widget.ListView\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.example.a23_hf069.databinding.FragmentRegionSelectionBinding\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.GlobalScope\r\nimport kotlinx.coroutines.launch\r\nimport kotlinx.coroutines.withContext\r\nimport okhttp3.*\r\nimport java.io.IOException\r\nimport java.io.StringReader\r\nimport org.xmlpull.v1.XmlPullParser\r\n\r\n\r\nclass RegionSelectionFragment : Fragment() {\r\n    private lateinit var binding: FragmentRegionSelectionBinding\r\n    private lateinit var regionAdapter1: ArrayAdapter<String> // 대분류 지역 리스트뷰에 대한 어댑터\r\n    private lateinit var regionAdapter2: ArrayAdapter<String> // 중분류 지역 리스트뷰에 대한 어댑터\r\n    private lateinit var regionListView1: ListView // 우측의 대분류 지역 리스트뷰\r\n    private lateinit var regionListView2: ListView // 좌측의 중분류 지역 리스트뷰\r\n    private val regionList1: MutableList<String> = mutableListOf() // 대분류 지역명을 담을 리스트\r\n    private val regionList2: MutableList<String> = mutableListOf() // 중분류 지역명을 담을 리스트\r\n    // 전체 카테고리에 표시될 지역 이름 리스트\r\n    private val wholeRegionList: List<String> = listOf(\"서울 전체\", \"부산 전체\", \"대구 전체\",\"인천 전체\", \"광주 전체\", \"대전 전체\", \"울산 전체\", \"세종 전체\", \"경기 전체\", \"충북 전체\", \"충남 전체\", \"전북 전체\", \"전남 전체\", \"경북 전체\", \"경남 전체\", \"제주 전체\", \"강원 전체\" )\r\n    private var selectedOneDepthRegion: String? = null// 선택한 oneDepth 지역명을 저장할 변수\r\n    private val selectedRegionList: MutableList<String> =  mutableListOf() // 선택된 지역들을 저장할 리스트\r\n\r\n    // ViewModel 생성\r\n    private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels()\r\n\r\n\r\n    // 지역 목록을 불러오는 API의 기본 URL을 설정\r\n    private val baseUrl =\r\n        \"http://openapi.work.go.kr/opi/commonCode/commonCode.do?returnType=XML&target=CMCD&authKey=WNLJYZLM2VZXTT2TZA9XR2VR1HK&dtlGb=1\"\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        binding = FragmentRegionSelectionBinding.inflate(inflater, container, false)\r\n        val rootView = binding.root\r\n\r\n        // View 초기화\r\n        val searchEditText = binding.tvSelectRegion\r\n        regionListView1 = binding.lvSuperRegion\r\n        regionListView2 = binding.lvMiddleRegion\r\n        val regionSelcetButton = binding.btnRegionSelectComplete\r\n\r\n        // ListView 초기화\r\n        regionAdapter1 = ArrayAdapter(requireContext(), android.R.layout.simple_list_item_1, regionList1)\r\n        regionAdapter2 = ArrayAdapter(requireContext(), android.R.layout.simple_list_item_1, regionList2)\r\n        regionListView1.adapter = regionAdapter1\r\n        regionListView2.adapter = regionAdapter2\r\n\r\n\r\n        // 지역 목록 API 호출하여 regionList1,2에 결과 담기\r\n        fetchRegionList()\r\n\r\n        // regionListView1에서 대분류 지역 선택 시 이벤트 처리\r\n        regionListView1.onItemClickListener =\r\n            AdapterView.OnItemClickListener { _, _, position, _ ->\r\n                selectedOneDepthRegion = regionAdapter1.getItem(position) ?: \"\" // 클릭된 아이템의 위치(position)을 기반으로 해당 아이템의 지역명을 가져옴\r\n                updateRegionListView2() // 대분류 지역에 해당하는 중분류 지역을 보여주도록 ui 업데이트\r\n            }\r\n\r\n        // regionListView2에서 중분류 지역 선택 시 이벤트 처리\r\n        regionListView2.onItemClickListener =\r\n            AdapterView.OnItemClickListener { _, _, position, _ ->\r\n                val selectedRegion = regionAdapter2.getItem(position) // 선택한 지역 키워드\r\n                if (selectedRegion != null) {\r\n                    // 선택된 지역이 리스트에 이미 포함되어 있지 않은 경우에만 추가\r\n                    if (!selectedRegionList.contains(selectedRegion)) {\r\n                        selectedRegionList.add(selectedRegion)\r\n                        updateSelectedRegionTextView() // 선택된 지역 목록을 보여주는 TextView를 업데이트\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n        // EditText에서 검색어 입력 시 이벤트 처리\r\n        searchEditText.setOnEditorActionListener { _, _, _ ->\r\n            val searchText = searchEditText.text.toString() // EditText에 입력된 텍스트를 가져와서 문자열로 변환\r\n            filterRegionList(searchText) // 가져온 검색어를 사용하여 지역 목록을 필터링하고, 결과를 ListView에 반영\r\n            true // 가져온 검색어를 사용하여 지역 목록을 필터링하고, 결과를 ListView에 반영\r\n        }\r\n\r\n        // drawableRight(검색 아이콘) 클릭 시 검색 이벤트 처리\r\n        searchEditText.setOnTouchListener { _, event ->\r\n            val drawableRight = 2 // Index of the drawableRight icon\r\n            if (event.action == MotionEvent.ACTION_UP &&\r\n                event.rawX >= (searchEditText.right - searchEditText.compoundDrawables[drawableRight].bounds.width())\r\n            ) {\r\n                val searchText = searchEditText.text.toString()\r\n                filterRegionList(searchText)\r\n                true\r\n            } else {\r\n                false\r\n            }\r\n        }\r\n\r\n        regionSelcetButton.setOnClickListener {\r\n            val selectedRegions = selectedRegionList.joinToString(\", \\n\")\r\n            sharedSelectionViewModel.selectedRegion = selectedRegions // 선택된 지역 정보를 ViewModel에 저장\r\n\r\n            val wantedFilteringFragment = WantedFilteringFragment()\r\n            requireActivity().supportFragmentManager.beginTransaction()\r\n                .replace(R.id.fl_container, wantedFilteringFragment)\r\n                .addToBackStack(null)\r\n                .commit()\r\n        }\r\n\r\n        return rootView\r\n    } // onCreateView 함수 종료\r\n\r\n\r\n    // 워크넷 api로부터 지역 정보를 가져오는 함수\r\n    private fun fetchRegionList() {\r\n        val client = OkHttpClient()\r\n        val request = Request.Builder()\r\n            .url(baseUrl)\r\n            .build()\r\n\r\n        client.newCall(request).enqueue(object : Callback {\r\n            override fun onFailure(call: Call, e: IOException) {\r\n                showErrorToast()\r\n            }\r\n\r\n            override fun onResponse(call: Call, response: Response) {\r\n                if (response.isSuccessful) {\r\n                    val xmlString = response.body?.string()\r\n                    parseRegionList(xmlString) // parsing하기\r\n                } else {\r\n                    showErrorToast()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // xml에서 읽어온 지역정보를 parsing하여 regionList1,2에 저장\r\n    private fun parseRegionList(xmlString: String?) {\r\n        GlobalScope.launch(Dispatchers.Main) {\r\n            withContext(Dispatchers.Default) {\r\n                val xmlPullParser: XmlPullParser = Xml.newPullParser()\r\n                xmlPullParser.setInput(StringReader(xmlString))\r\n\r\n                var eventType = xmlPullParser.eventType\r\n                var isOneDepth = false\r\n                var isTwoDepth = false\r\n                var isregionNm = false\r\n                var oneDepthRegionName = \"\"\r\n                var twoDepthRegionName = \"\"\r\n\r\n                while (eventType != XmlPullParser.END_DOCUMENT) {\r\n                    when (eventType) {\r\n                        XmlPullParser.START_TAG -> {\r\n                            when (xmlPullParser.name) {\r\n                                // oneDepth를 시작할 때 twoDepth를 종료\r\n                                \"oneDepth\" -> {\r\n                                    isOneDepth = true\r\n                                    isTwoDepth = false\r\n\r\n                                }\r\n                                // twoDepth를 시작할 때 oneDepth를 종료합니다.\r\n                                \"twoDepth\" -> {\r\n                                    isOneDepth = false\r\n                                    isTwoDepth = true\r\n                                }\r\n                                \"regionNm\" -> {\r\n                                    isregionNm = true\r\n                                }\r\n                            }\r\n                        }\r\n                        XmlPullParser.TEXT -> {\r\n                            if (isOneDepth && isregionNm && xmlPullParser.text.trim().isNotEmpty()) {\r\n                                oneDepthRegionName = xmlPullParser.text.trim()\r\n                            }\r\n                            if (isTwoDepth && isregionNm && xmlPullParser.text.trim().isNotEmpty()) {\r\n                                twoDepthRegionName = xmlPullParser.text.trim()\r\n                            }\r\n                        }\r\n                        XmlPullParser.END_TAG -> {\r\n                            when (xmlPullParser.name) {\r\n                                \"oneDepth\" -> {\r\n                                    if (oneDepthRegionName.isNotEmpty()) {\r\n                                        regionList1.add(oneDepthRegionName)\r\n                                        oneDepthRegionName = \"\"\r\n                                        isOneDepth=false\r\n                                    }\r\n                                }\r\n                                \"twoDepth\" -> {\r\n                                    if (twoDepthRegionName.isNotEmpty()) {\r\n                                        regionList2.add(twoDepthRegionName)\r\n                                        twoDepthRegionName = \"\"\r\n                                        isTwoDepth=false\r\n                                    }\r\n                                }\r\n                                \"regionNm\" -> {\r\n                                    isregionNm=false\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    eventType = xmlPullParser.next()\r\n                }\r\n            }\r\n\r\n            regionAdapter1.notifyDataSetChanged()\r\n            regionList1.set(0, \"전체\")\r\n        }\r\n    }\r\n\r\n    // 중분류 지역 리스트뷰 UI 업데이트\r\n    private fun updateRegionListView2() {\r\n        val selectedRegion = selectedOneDepthRegion\r\n        // regionListView1에서 아무것도 선택되지 않았을 때, regionAdapter2를 비우고 리턴 -> 널체크\r\n        if (selectedRegion == null) {\r\n            regionAdapter2.clear()\r\n            regionAdapter2.notifyDataSetChanged()\r\n            return\r\n        }\r\n\r\n        // 선택한 oneDepth 지역명에 해당하는 twoDepth 지역명들을 필터링하여 가져오기\r\n        val filteredTwoDepthRegions = regionList2.filter { region ->\r\n            val regionWords = region.split(\" \") // 띄어쓰기 등으로 문자열 분리\r\n            val selectedWords = selectedRegion.split(\" \")\r\n            regionWords.firstOrNull() == selectedWords.firstOrNull() // 앞 단어 기준으로 포함 (ex) 경기 광주 -> 광주가 아닌 경기가 기준\r\n        }.distinct()\r\n\r\n        // 대분류에서 전체를 누른 경우 해당하는 중분류 보여주기\r\n        if(selectedRegion.equals(\"전체\")){\r\n            regionAdapter2 = ArrayAdapter(requireContext(), android.R.layout.simple_list_item_1, wholeRegionList)\r\n            regionListView2.adapter = regionAdapter2\r\n\r\n        }\r\n        else{ // 대분류에서 전체를 제외한 나머지 지역을 누른 경우\r\n            // regionAdapter2를 새로운 리스트로 갱신합니다. **** cf**** filter 한 뒤에 notifychange를 하게되면 regionList2에 filter 내용이 적용되어 리스트가 비게됨\r\n            regionAdapter2 = ArrayAdapter(requireContext(), android.R.layout.simple_list_item_1, filteredTwoDepthRegions)\r\n            regionListView2.adapter = regionAdapter2 // 해당 지역에 속하는 중분류 지역 보여주기\r\n        }\r\n\r\n\r\n    }\r\n\r\n    // fragment_region_selection에서 선택한 지역 키워드를 화면에 표출\r\n    private fun updateSelectedRegionTextView(){\r\n        val selectedRegions = selectedRegionList.joinToString(\", \\n\") // selectedRegionList의 모든 항목을 하나의 문자열로 합침\r\n        binding.tvSelectedRegion.text = selectedRegions // selectedRegions에서 만들어진 문자열을 tvSelectedRegion의 텍스트로 설정하여 선택된 지역들을 화면에 표시\r\n\r\n    }\r\n\r\n    // ArrayAdapter에서 제공하는 filter를 이용하여 입력된 검색어를 포함하는 지역만 표시\r\n    private fun filterRegionList(searchText: String) {\r\n        regionAdapter1.filter.filter(searchText)\r\n\r\n    }\r\n\r\n    private fun showErrorToast() {\r\n        Toast.makeText(requireContext(), \"Failed to fetch region list.\", Toast.LENGTH_SHORT).show()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/a23_hf069/RegionSelectionFragment.kt b/app/src/main/java/com/example/a23_hf069/RegionSelectionFragment.kt
--- a/app/src/main/java/com/example/a23_hf069/RegionSelectionFragment.kt	(revision ea91a29097805548d7e4dbef59777782b754989d)
+++ b/app/src/main/java/com/example/a23_hf069/RegionSelectionFragment.kt	(date 1691543978000)
@@ -8,6 +8,7 @@
 import android.view.ViewGroup
 import android.widget.AdapterView
 import android.widget.ArrayAdapter
+import android.widget.Button
 import android.widget.ListView
 import android.widget.Toast
 import androidx.fragment.app.Fragment
@@ -31,10 +32,12 @@
     private lateinit var regionListView2: ListView // 좌측의 중분류 지역 리스트뷰
     private val regionList1: MutableList<String> = mutableListOf() // 대분류 지역명을 담을 리스트
     private val regionList2: MutableList<String> = mutableListOf() // 중분류 지역명을 담을 리스트
+
     // 전체 카테고리에 표시될 지역 이름 리스트
     private val wholeRegionList: List<String> = listOf("서울 전체", "부산 전체", "대구 전체","인천 전체", "광주 전체", "대전 전체", "울산 전체", "세종 전체", "경기 전체", "충북 전체", "충남 전체", "전북 전체", "전남 전체", "경북 전체", "경남 전체", "제주 전체", "강원 전체" )
     private var selectedOneDepthRegion: String? = null// 선택한 oneDepth 지역명을 저장할 변수
-    private val selectedRegionList: MutableList<String> =  mutableListOf() // 선택된 지역들을 저장할 리스트
+    private var selectedRegionList: MutableList<String> =  mutableListOf() // 선택된 지역들을 저장할 리스트
+
 
     // ViewModel 생성
     private val sharedSelectionViewModel: SharedSelectionViewModel by activityViewModels()
@@ -113,6 +116,9 @@
         regionSelcetButton.setOnClickListener {
             val selectedRegions = selectedRegionList.joinToString(", \n")
             sharedSelectionViewModel.selectedRegion = selectedRegions // 선택된 지역 정보를 ViewModel에 저장
+            // &keyword= 로 검색할 지역들을 |로 연결
+            val regionKeyword = selectedRegionList.joinToString ("|")
+            sharedSelectionViewModel.keywordRegions = regionKeyword
 
             val wantedFilteringFragment = WantedFilteringFragment()
             requireActivity().supportFragmentManager.beginTransaction()
